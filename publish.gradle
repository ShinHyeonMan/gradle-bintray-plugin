apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

if (!project.ext.has('GROUP') || !project.ext.has('ARTIFACT') || !project.ext.has('VERSION')) {
    throw new MissingPropertyException("Extra properties['GROUP', 'ARTIFACT', 'VERSION'] are required.")
}

boolean isAndroidModule = false
boolean isJavaModule = false
if (project.plugins.hasPlugin('com.android.library')) {
    isAndroidModule = true
} else if (project.plugins.hasPlugin('java')) {
    isJavaModule = true
} else {
    throw new UnknownPluginException('Just support android/java projects now.')
}

task sourcesJar(type: Jar) {
    group 'build'
    classifier = 'sources'
}
if (isAndroidModule) {
    sourcesJar {
        from android.sourceSets.main.java.srcDirs
    }
} else if (isJavaModule) {
    sourcesJar {
        from sourceSets.main.java.srcDirs
    }
}

if (isAndroidModule) {
    task javadoc(type: Javadoc) {
        group 'documentation'
        options.encoding = 'UTF-8'
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }
} else if (isJavaModule) {
    javadoc {
        options.encoding = 'UTF-8'
        failOnError false
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group 'build'
    from javadoc.getDestinationDir()
    classifier = 'javadoc'
}

def verifyDependency(Dependency it) {
    return it.group != null && it.group != 'unspecified' && it.name != 'unspecified' &&
            it.version != null && it.version != 'unspecified'
}

publishing {
    publications {
        Bintray(MavenPublication) {
            groupId project.ext.GROUP
            artifactId project.ext.ARTIFACT
            version project.ext.VERSION

            artifact sourcesJar
            artifact javadocJar
            if (isAndroidModule) {
                artifact bundleRelease
            } else if (isJavaModule) {
                from components.java
            }

            pom {
                if (isAndroidModule) {
                    packaging 'aar'
                } else if (isJavaModule) {
                    packaging 'jar'
                }
                if (isAndroidModule) {
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.compile.dependencies.each {
                            if (verifyDependency(it)) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                        configurations.implementation.dependencies.each {
                            if (verifyDependency(it)) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                        configurations.api.dependencies.each {
                            if (verifyDependency(it)) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
        }
    }
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}
bintray {
    user = properties.containsKey('BINTRAY_USER') ? properties.get('BINTRAY_USER') : ""
    key = properties.containsKey('BINTRAY_API_KEY') ? properties.get('BINTRAY_API_KEY') : ""
    publications = ['Bintray']
    publish = project.ext.has('PUBLISH') ? project.ext.PUBLISH : true
    override = project.ext.has('OVERRIDE') ? project.ext.OVERRIDE : false
    dryRun = project.ext.has('DRYRUN') ? project.ext.DRYRUN : false
    pkg {
        repo = project.ext.has('BINTRAY_REPO') ? project.ext.BINTRAY_REPO : 'maven'
        name = project.ext.has('BINTRAY_NAME') ? project.ext.BINTRAY_NAME : project.ext.ARTIFACT
        licenses = project.ext.has('LICENSES') ? project.ext.LICENSES : ['Apache-2.0']
        vcsUrl = project.ext.has('VCS_URL') ? project.ext.VCS_URL : ''
        if (project.ext.has('USER_ORG')) {
            userOrg = project.ext.USER_ORG
        }
        publicDownloadNumbers = true

        version {
            name = project.ext.VERSION
            vcsTag = project.ext.VERSION
        }
    }
}
